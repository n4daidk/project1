#Importing...
import tkinter as tk
from tkinter import ttk
import operator

import connect
import user as userFile
import comment as commentFile
import post as postFile 
from functools import partial

import urllib.request
import re
from PIL import Image, ImageTk

#import aboutPage as aboutPageFile

user= userFile.user(connect.db_url)
comment = commentFile.comment(connect.db_url)
post = postFile.post(connect.db_url)
currentrole = user.currentrole
mode = True

like_state = "unliked"
allPosts = post.getAllPosts()

postDict = {} 
commentDict = {}



global path
path = r'c:\Users\lenovo\Desktop\UPDATEDpythonClasses'


#Functions

def checklogin():
    global currentuser_ID
    name=name_var.get()
    #print (name)
    password=pass_var.get()

    if(name=="" or password==""):
        loginNotFilledMessage()
        print("function exited")
        return
    else:
        if(user.login(name, password)):
            user.currentrole=user.getRole(name, password)
            user.currentName = user.getName(name,password)
            print(user.currentName)
            welcomeMessage()
            currentuser_ID = user.getUserIdByName_Password(name, password)
            
            if(user.currentrole==0):
                adminPanelframe.tkraise()
                adminButton.place(x=70,y=200)
            else:
                userframe.tkraise()
                adminButton.place_forget()
        
        else:
            appearMessage()
            print("login fail.....")

def deleteAllData():
    nameEntry.delete(0,"end")
    LoginPassword.delete(0, "end")

    fullnameEntry.delete(0,"end")
    usernameEntry.delete(0,"end")
    RegisterPassword.delete(0,"end")
    roleEntry.set("")

def checkregister(name,fullname,pass1,role_var):
    global currentuser_ID
    usernameRegex = '^[A-Za-z]\\w{4,14}$'
    userNameresult = re.match(usernameRegex, name.get())
    passwordRegex = "^(?=.[a-z])(?=.[A-Z])(?=.\d)(?=.[@$!%#?&])[A-Za-z\d@$!#%?&]{6,20}$"
    passwordresult = re.match(passwordRegex, pass1.get())
    

    if(name.get()=="" or fullname.get()=="" or pass1.get()=="" or role_var.get()==""):
        registerNotFilledMessage()
    elif(userNameresult == None):
        print("username error!!!")
        test=ttk.Label(Mainwin,text="Characters in Username between 5 and 15.\nOnly alphanumeric characters and/or underscores.\nFirst character should be alphabetic.",foreground="red", font=(12))
        test.place(x=50,y=400)
        #update Frame to display message
        Mainwin.update()
        test.after(2000,test.destroy())
    elif(passwordresult == None):
        print("password error")
        test=ttk.Label(Mainwin,text="Characters in password between 6 and 20.\nAt least one uppercase letter.\nAt least one lowercase letter.\nAt least one number.\nAt least one special character[#?!@$%^&*-]",foreground="red", font=(12))
        test.place(x=80,y=370)
        #update Frame to display message
        Mainwin.update()
        test.after(1500,test.destroy())

    else:
        user.currentName = fullname_var.get()
        
        if(role_var.get() == "Admin"):
            user.currentName = fullname_var.get()
            if(user.register(name.get(),fullname.get(),pass1.get(),0)):
                    currentrole=0
                    adminPanelframe.tkraise()
                    welcomeMessage()
                    currentuser_ID = user.getUserIdByName_Password(name.get(), pass1.get())
                    #print(user.currentName, currentuser_ID)
            else:
                    appearRegisterMessage()
                    print("register fail....")
        elif(role_var.get() == "User"):
            if(user.register(name.get(),fullname.get(),pass1.get(),1)):
                currentrole=1
                welcomeMessage()
                userframe.tkraise()
                currentuser_ID = user.getUserIdByName_Password(name.get(), pass1.get())
                print(user.currentName, currentuser_ID)
            else:
                    appearRegisterMessage()
                    print("register fail....")
        
def appearMessage():
     test=ttk.Label(Mainwin,text="Username or password is incorrect. Please try again.",foreground="red", font=(12))
     test.place(x=25,y=140)
     #update Frame to display message
     Mainwin.update()
     test.after(1000,test.destroy())

def appearRegisterMessage():
     test=ttk.Label(registerframe,text="User is already registered!",foreground="red", font=(17))
     test.place(x=190,y=240)
     #update Frame to display message
     registerframe.update()
     test.after(1000,test.destroy())

def registerNotFilledMessage():
     test=ttk.Label(Mainwin,text="All fields must be filled.",foreground="red", font=(17))
     test.place(x=190,y=240)
     #update Frame to display message
     Mainwin.update()
     test.after(1000,test.destroy())

def loginNotFilledMessage():
     test=ttk.Label(Mainwin,text="All fields must be filled.",foreground="red", font=(17))
     test.place(x=190,y=140)
     #update Frame to display message
     Mainwin.update()
     test.after(1000,test.destroy())

def show_hidePassword(entrybox, passBtn):
    if entrybox.cget('show') == '':
        entrybox.config(show='*')
        passBtn.config(image=open_eye)
        return True
    else:
        entrybox.config(show='')
        passBtn.config(image=close_eye)
        return False

        userframe.tkraise()   
        
def darkMode():
     style.theme_use('awdark')

     registerNowBtn.config(fg="steelblue",background="#33393b", activebackground="black",activeforeground="steelblue")
     LoginNowbtn.config(fg="steelblue",background="#33393b", activebackground="black",activeforeground="steelblue")

     accountLabel.config(fg="white",background="#33393b")
     accountLabel2.config(fg="white",background="#33393b")

     #postName.config(fg="white",background="#33393b")
     #postUsername.config(fg="white",background="#33393b")
     #postContent.config(fg="white",background="#33393b")

     themeChanger.config(text="Light Mode")
     themeChanger1.config(text="Light Mode")
     themeChanger2.config(text="Light Mode")

def lightMode():
     style.theme_use('awlight')   
     
     registerNowBtn.config(fg="steelblue",background="#e8e8e7", activebackground="aliceblue",activeforeground="steelblue")
     LoginNowbtn.config(fg="steelblue",background="#e8e8e7", activebackground="aliceblue",activeforeground="steelblue")

     accountLabel.config(fg="black",background="#e8e8e7")
     accountLabel2.config(fg="black",background="#e8e8e7")

     themeChanger.config(text="Dark Mode")
     themeChanger1.config(text="Dark Mode")
     themeChanger2.config(text="Dark Mode")

def changeTheme():
     global mode
     if(mode == True):
        darkMode()
        mode = False
     else:
        lightMode()
        mode = True

def removeRecord():
    selected = adminPanel_table.selection()
    if selected:
        # a row is selected
        x = selected[0]
        adminPanel_table.delete(x)
        user.deleteUser(x)

def updateRecord():
    # Get selected item to Edit
   selected_item = adminPanel_table.selection()
   if selected_item:
        table_id = selected_item[0]
        print(table_id)

        editframe.tkraise()
        displaySelectedItem(table_id)
        #user.updateUser(y)

def displaySelectedItem(id):
    # clear entries
    FullnameEdit.delete(0,"end")
    UsernameEdit.delete(0,"end")
    PasswordEdit.delete(0,"end")
    roleEdit.delete(0,"end")

    tableUser = user.getUser(id)[0]
    if (tableUser[3] == 0):
        roleEdit.set("Admin")
    else:
        roleEdit.set("User")

    #print(tableUser[2])
    FullnameEdit.insert(0, tableUser[1])
    UsernameEdit.insert(0, tableUser[2])
    PasswordEdit.insert(0, tableUser[4])

def saveNewRecord():
        selected_item = adminPanel_table.selection()
        tableUser = user.getUser(selected_item)[0]
        print(tableUser)

        if (roleEditVar.get() == "Admin"):
                newRole_value = 0
        else:
                newRole_value = 1

        user.updateUser(selected_item,fullnameEditVar.get() , "full_Name")
        user.updateUser(selected_item,usernameEditVar.get() , "username")
        user.updateUser(selected_item,newRole_value , "role")
        user.updateUser(selected_item,PasswordEditVar.get() , "password")
        adminPanel_table.delete(selected_item)
        adminPanel_table.insert(parent="", index="end", iid= selected_item, values=(selected_item, fullnameEditVar.get(), usernameEditVar.get(), newRole_value, PasswordEditVar.get()))

        adminPanelframe.tkraise()

def createNewPost(lbldict, postVAR, iVAR):
        if(newPostContentvar.get() == "" or newPostnamevar.get() == ""):
            registerNotFilledMessage()
        else:
            postVAR +=1
            iVAR +=1
            createPostList = []
            post_username = user.getUsername(currentuser_ID)
            
            post.createPost(newPostContentvar.get(), newPostnamevar.get(), currentuser_ID, newPost_imgURL.get())
            postDict["post"+str(iVAR)] = post.getPost(postVAR)
            #print(postDict)
            if (newPost_imgURL.get() != ""):
                urllib.request.urlretrieve(postDict["post"+str(iVAR)][4], f"{postVAR}IMG.png")
                img = Image.open(f"{postVAR}IMG.png")
                locals()["postIMG" + str(postVAR)] = ImageTk.PhotoImage(img)
                
                locals()["imgLabel" + str(postVAR)] = tk.Label(postframe2, image= locals()["postIMG" + str(postVAR)])
                locals()["imgLabel" + str(postVAR)].grid(row =5*iVAR+2 , column = 1)
                createPostList.append(locals()["imgLabel" + str(postVAR)])
            
            locals()["postUsername" + str(postVAR)] = ttk.Label(postframe2, text=post_username, font=("Helvetica",16))
            locals()["postUsername" + str(postVAR)].grid(row =5*iVAR+1, column = 1, padx = (0,10))
            createPostList.append(locals()["postUsername" + str(postVAR)])
        
            locals()["postName" + str(postVAR)] = ttk.Label(postframe2, text=newPostnamevar.get(), font=("Helvetica",13, "bold"))
            locals()["postName" + str(postVAR)].grid(row = 5*iVAR+3,column = 1)
            createPostList.append(locals()["postName" + str(postVAR)])

            locals()["postContent" + str(postVAR)] = ttk.Label(postframe2, text=newPostContentvar.get() , font=("Helvetica",13),wraplength= 350)
            locals()["postContent" + str(postVAR)].grid(row =5*iVAR+4, column =1, pady = (0, 10))
            createPostList.append(locals()["postContent" + str(postVAR)])

            locals()["pfpIMG" + str(postVAR)] = ttk.Label(postframe2,image = pfpIcon, font= ("georgia",15))
            locals()["pfpIMG" + str(postVAR)].grid(row =5*iVAR+1, column =1, padx = (0,250) )
            createPostList.append(locals()["pfpIMG" + str(postVAR)])
        
            #postId_showComments = postDict["post"+str(iVAR)][0]
            locals()["commentBTN" + str(postVAR)] = tk.Button(postframe2, image = commentIcon ,bd=0,cursor="hand2",command= partial(showComments,postId_showComments))
            locals()["commentBTN" + str(postVAR)].grid(row =5*iVAR+3, column =3 )
            createPostList.append( locals()["commentBTN" + str(postVAR)])

            locals()["postLike" + str(postVAR)] = tk.Button(postframe2, image = likeIcon ,bd=0,cursor="hand2")
            locals()["postLike" + str(postVAR)].grid(row =5*iVAR+3, column =2 )
            locals()["postLike" + str(postVAR)].config(command = partial(likeFunc,locals()["postLike" + str(postVAR)]))
            createPostList.append(locals()["postLike" + str(postVAR)])

            #print(postDict["post"+str(i)][3])
            locals()["deletePost_Btn" + str(postVAR)] = tk.Button(postframe2,image=deleteIcon)
            locals()["deletePost_Btn" + str(postVAR)].grid(row = iVAR+iVAR+2 , column = 3, pady = (10, 0))
            locals()["deletePost_Btn" + str(postVAR)].config(command = partial(deletePost, "post"+str(iVAR), postVAR, lbldict))
            createPostList.append(locals()["deletePost_Btn" + str(postVAR)])

            locals()["editPost_Btn" + str(postVAR)] = tk.Button(postframe2,image=editIcon)
            locals()["editPost_Btn" + str(postVAR)].grid(row = iVAR+iVAR+2 , column = 2, pady = (10, 0))            
            locals()["editPost_Btn" + str(postVAR)].config(command = partial(editPost, "post"+str(iVAR)))
            createPostList.append(locals()["editPost_Btn" + str(postVAR)])    

            lbldict[postVAR] = createPostList
            postframe.tkraise()

def switchFrame(frameName):
        name_var.set("")
        pass_var.set("")
        fullname_var.set("")
        role_var.set("")
        frameName.tkraise()

def updateWelcomeText():
        welcomeText = f"Welcome back {user.currentName}! We missed you :)"
        welcomeMSG.config(text = welcomeText)

def welcomeMessage():
        updateWelcomeText()
        userframe.update() 

def likeFunc(likeBtn):
        global like_state
        if (like_state == "unliked"):
                likeBtn.config(image = likedIcon)
                like_state = "liked"

        elif(like_state == "liked"):
                likeBtn.config(image = likeIcon)
                like_state = "unliked"

def showPosts():
    global postCanvas
    global postscrollbar
    global postframe2
    global postId_showComments
    postCanvas = tk.Canvas(postframe)
    postCanvas.pack(fill=tk.BOTH, expand=1, side = tk.LEFT)

    postscrollbar = ttk.Scrollbar(postframe, orient=tk.VERTICAL, command=postCanvas.yview)
    postscrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    postCanvas.configure(yscrollcommand=postscrollbar.set)
    postCanvas.bind('<Configure>', lambda e: postCanvas.configure(scrollregion = postCanvas.bbox("all")))
    
    postframe2 = ttk.Frame(postCanvas, width = 500, height = 500)
    postCanvas.create_window((0,0), window=postframe2, anchor="nw")

    tk.Button(postframe2,text="<< Back",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=7, height=1, command= postBackBtn).place(x=10,y=10)

    newPostBtn = tk.Button(postframe2,text="Create New Post",fg="aliceblue",background="steelblue",activebackground="aliceblue",width=13, height=1,font=("georgia",12),bd=0,cursor="hand2", command = createPostframe.tkraise)
    newPostBtn.grid(row = 0,column=3)

    ttk.Label(postframe2,text="Post", font= ("georgia",20,"bold")).grid(row = 0, column = 1)

    postframe.tkraise()
    i = 0
    postLabelsDict={}
    for i, list_Value1 in enumerate(allPosts):
        postLabelsList = []
        postDict["post"+str(i)] = allPosts[i]
        post_username = user.getUsername(postDict["post"+str(i)][3])
        list_Value = list_Value1[0]
        #print(str(postDict["post"+str(i+1)][4]))

        if(postDict["post"+str(i)][4]!= ""):
            urllib.request.urlretrieve(postDict["post"+str(i)][4], f"{list_Value}IMG.png")
            img = Image.open(f"{list_Value}IMG.png")
            locals()["postIMG" + str(list_Value)] = ImageTk.PhotoImage(img)
            
            locals()["imgLabel" + str(list_Value)] = tk.Label(postframe2, image= locals()["postIMG" + str(list_Value)])
            locals()["imgLabel" + str(list_Value)].grid(row =5*i+2 , column = 1)
            postLabelsList.append(locals()["imgLabel" + str(list_Value)])
        
        locals()["postUsername" + str(list_Value)] = ttk.Label(postframe2, text=post_username, font=("Helvetica",16))
        locals()["postUsername" + str(list_Value)].grid(row =5*i+1, column = 1, padx = (0,10))
        postLabelsList.append(locals()["postUsername" + str(list_Value)])
    
        locals()["postName" + str(list_Value)] = ttk.Label(postframe2, text=postDict["post"+str(i)][2], font=("Helvetica",13, "bold"))
        locals()["postName" + str(list_Value)].grid(row = 5*i+3,column = 1)
        postLabelsList.append(locals()["postName" + str(list_Value)])

        locals()["postContent" + str(list_Value)] = ttk.Label(postframe2, text=postDict["post"+str(i)][1], font=("Helvetica",13),wraplength= 350)
        locals()["postContent" + str(list_Value)].grid(row =5*i+4, column =1, pady = (0, 10))
        postLabelsList.append(locals()["postContent" + str(list_Value)])

        locals()["pfpIMG" + str(list_Value)] = ttk.Label(postframe2,image = pfpIcon, font= ("georgia",15))
        locals()["pfpIMG" + str(list_Value)].grid(row =5*i+1, column =1, padx = (0,250) )
        postLabelsList.append(locals()["pfpIMG" + str(list_Value)])
    
        postId_showComments = postDict["post"+str(i)][0]
        locals()["commentBTN" + str(list_Value)] = tk.Button(postframe2, image = commentIcon ,bd=0,cursor="hand2",command= partial(showComments,postId_showComments))
        locals()["commentBTN" + str(list_Value)].grid(row =5*i+3, column =3 )
        postLabelsList.append( locals()["commentBTN" + str(list_Value)])

        locals()["postLike" + str(list_Value)] = tk.Button(postframe2, image = likeIcon ,bd=0,cursor="hand2")
        locals()["postLike" + str(list_Value)].grid(row =5*i+3, column =2 )
        locals()["postLike" + str(list_Value)].config(command = partial(likeFunc,locals()["postLike" + str(list_Value)]))
        postLabelsList.append(locals()["postLike" + str(list_Value)])

        if (postDict["post"+str(i)][3] == currentuser_ID):
            #print(postDict["post"+str(i)][3])
            locals()["deletePost_Btn" + str(list_Value)] = tk.Button(postframe2,image=deleteIcon)
            locals()["deletePost_Btn" + str(list_Value)].grid(row = i+i+2 , column = 3, pady = (10, 0))
            locals()["deletePost_Btn" + str(list_Value)].config(command = partial(deletePost, "post"+str(i), list_Value, postLabelsDict))
            postLabelsList.append(locals()["deletePost_Btn" + str(list_Value)])

            locals()["editPost_Btn" + str(list_Value)] = tk.Button(postframe2,image=editIcon)
            locals()["editPost_Btn" + str(list_Value)].grid(row = i+i+2 , column = 2, pady = (10, 0))            
            locals()["editPost_Btn" + str(list_Value)].config(command = partial(editPost, "post"+str(i)))
            postLabelsList.append(locals()["editPost_Btn" + str(list_Value)])

        postLabelsDict[list_Value]=postLabelsList     
        tk.Button(editPostframe,text="Save",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=11, height=2, command = partial(saveUpdatedPost, list_Value, postLabelsDict, "post"+str(i))).place(x=350,y=310)
        
        tk.Button(createPostframe,text="Save",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=11, height=2, command = partial(createNewPost, postLabelsDict, list_Value, i) ).place(x=350,y=310)

def showComments(postID):
    global commentCanvas
    global commentscrollbar
    global newcommentEntry
    global commentframe2
    global allCommentsNUM
    global allComments
    allComments = comment.getAllCommentsInPost(postID)
    commentCanvas = tk.Canvas(commentframe)
    
    commentCanvas.pack(fill=tk.BOTH, expand=1, side = tk.LEFT)

    commentscrollbar = ttk.Scrollbar(commentframe, orient=tk.VERTICAL, command=commentCanvas.yview)
    commentscrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    commentCanvas.configure(yscrollcommand=commentscrollbar.set)
    commentCanvas.bind('<Configure>', lambda e: commentCanvas.configure(scrollregion = commentCanvas.bbox("all")))

    commentframe2 = ttk.Frame(commentCanvas, width = 500, height = 500)
    commentCanvas.create_window((0,0), window=commentframe2, anchor="nw")

    ttk.Label(commentframe2,text="Comments", font= ("georgia",20,"bold")).grid(row = 0, column = 1, padx = 10, pady = (0, 10))

    commentframe.tkraise()    
    
    tk.Button(commentframe2,text="<< Back",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=7, height=1, command= lambda: commentBackBtn()).grid(row = 0, column = 0)

    if allComments == None:
        allCommentsNUM = ttk.Label(commentframe2,text="No Comments... Add new comment now!", font= ("georgia",11))
        allCommentsNUM.grid(row = 1, column = 1)
        return
    else:
        allCommentsNUM = ttk.Label(commentframe2,text=f"{len(allComments)} Comments", font= ("georgia",11))
        allCommentsNUM.grid(row = 1, column = 1)
    commentLabelsDict = {}
    for i, comment_Value1 in enumerate(allComments):
        commentLabelsList = []
        comment_Value = comment_Value1[0]
        commentDict["comment"+str(i)] = allComments[i]
        comment_username = user.getUsername(commentDict["comment"+str(i)][2])
   
        locals()["commentUsername" + str(comment_Value)] = ttk.Label(commentframe2, text=comment_username, font=("Helvetica",15, "bold"))
        locals()["commentUsername" + str(comment_Value)].grid(row = i+i+2 , column = 1, padx = 5, pady = (10, 0))
        commentLabelsList.append(locals()["commentUsername" + str(comment_Value)])

        locals()["commentContent" + str(comment_Value)] = ttk.Label(commentframe2, text=commentDict["comment"+str(i)][1], font=("Helvetica",14), wraplength= 350)
        locals()["commentContent" + str(comment_Value)].grid(row = i+i+3 , column = 1, padx = 5, pady = (0, 10))
        commentLabelsList.append(locals()["commentContent" + str(comment_Value)])

        locals()["commentLike" + str(comment_Value)] = tk.Button(commentframe2, image = likeIcon ,bd=0,cursor="hand2")
        locals()["commentLike" + str(comment_Value)].grid(row = i+i+3 , column = 3, padx = 5, pady = (0, 10))
        locals()["commentLike" + str(comment_Value)].config(command = partial(likeFunc, locals()["commentLike" + str(comment_Value)]))
        commentLabelsList.append(locals()["commentLike" + str(comment_Value)])
        
        if (commentDict["comment"+str(i)][2] == currentuser_ID):
            locals()["deleteComment_Btn" + str(comment_Value)] = tk.Button(commentframe2,image=deleteIcon)
            locals()["deleteComment_Btn" + str(comment_Value)].grid(row = i+i+2 , column = 3, pady = (10, 0))
            locals()["deleteComment_Btn" + str(comment_Value)].config(command = partial(commentDelete, "comment"+str(i), comment_Value, commentLabelsDict))
            commentLabelsList.append(locals()["deleteComment_Btn" + str(comment_Value)])

            locals()["editComment_Btn" + str(comment_Value)] = tk.Button(commentframe2,image=editIcon)
            locals()["editComment_Btn" + str(comment_Value)].grid(row = i+i+2 , column = 2, pady = (10, 0))            
            locals()["editComment_Btn" + str(comment_Value)].config(command = partial(commentEdit, "comment"+str(i), comment_Value, commentLabelsDict))
            commentLabelsList.append(locals()["editComment_Btn" + str(comment_Value)])
        commentLabelsDict[comment_Value]=commentLabelsList

    newcommentEntry = ttk.Entry(commentframe2,textvariable=newComment_var, font= ("georgia",15), width= 23)
    newcommentEntry.grid(column = 1, row = i+i+15)
        
    sendBtn = tk.Button(commentframe2, image = sendIcon ,bd=0,cursor="hand2")
    sendBtn.grid(column = 3, row = i+i+15)
    sendBtn.config(command = lambda: createNewComment(comment_Value, commentLabelsList, i, commentLabelsDict))
        
    tk.Button(editCommentframe,text="Save",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=11, height=2, command = partial(saveUpdatedComment,comment_Value,commentLabelsDict)).place(x=350,y=310)
    
    print(commentLabelsList)

def commentBackBtn():
    postframe.tkraise()
    
    commentCanvas.delete()
    commentCanvas.destroy()
    commentscrollbar.config(command = "")
    commentscrollbar.pack_forget()

def postBackBtn():
    userframe.tkraise()
    
    postCanvas.delete()
    postCanvas.destroy()
    postscrollbar.config(command = "")
    postscrollbar.pack_forget()

def commentDelete(commentKey, cmntVAR,commentList):
    comment.deleteComment(commentDict[commentKey][0])
    print(commentList)
    
    for lbl in commentList[cmntVAR]:
        lbl.destroy()

    del commentDict[commentKey]
    Num = len(allComments)
    cmntNum = Num -1
    allCommentsNUM.config(text=f"{cmntNum} Comments")
    #commentLabelsList.append(locals()["commentUsername" + str(cmntVAR)])
    commentframe2.update()
    
def logOut():
    deleteAllData()
    loginframe.tkraise()
    #newcommentEntry.pleace_forget()
    #commentframe.destroy()

def createNewComment(cmntVAR, commentList, iVAR, commentlblsDict):
    if (newComment_var.get() == ""):
        return
    
    else:
        cmntVAR +=1
        iVAR += 1
        print(iVAR, cmntVAR)
        commentUsername = user.getUsername(currentuser_ID)

        comment.createComment(newComment_var.get(), postId_showComments, currentuser_ID)

        comment_username = user.getUsername(currentuser_ID)
   
        locals()["commentUsername" + str(cmntVAR)] = ttk.Label(commentframe2, text=comment_username, font=("Helvetica",15, "bold"))
        locals()["commentUsername" + str(cmntVAR)].grid(row = iVAR+iVAR+2 , column = 1, padx = 5, pady = (10, 0))
        commentList.append(locals()["commentUsername" + str(cmntVAR)])

        locals()["commentContent" + str(cmntVAR)] = ttk.Label(commentframe2, text= newComment_var.get(), font=("Helvetica",14), wraplength= 350)
        locals()["commentContent" + str(cmntVAR)].grid(row = iVAR+iVAR+3 , column = 1, padx = 5, pady = (0, 10))
        commentList.append(locals()["commentContent" + str(cmntVAR)])

        locals()["commentLike" + str(cmntVAR)] = tk.Button(commentframe2, image = likeIcon ,bd=0,cursor="hand2")
        locals()["commentLike" + str(cmntVAR)].grid(row = iVAR+iVAR+3 , column = 3, padx = 5, pady = (0, 10))
        locals()["commentLike" + str(cmntVAR)].config(command = partial(likeFunc, locals()["commentLike" + str(cmntVAR)]))
        commentList.append(locals()["commentLike" + str(cmntVAR)])
    
        locals()["deleteComment_Btn" + str(cmntVAR)] = tk.Button(commentframe2,image=deleteIcon)
        locals()["deleteComment_Btn" + str(cmntVAR)].grid(row = iVAR+iVAR+2 , column = 3, pady = (10, 0))
        locals()["deleteComment_Btn" + str(cmntVAR)].config(command = partial(commentDelete, "comment"+str(iVAR), cmntVAR, commentlblsDict))
        commentList.append(locals()["deleteComment_Btn" + str(cmntVAR)])

        locals()["editComment_Btn" + str(cmntVAR)] = tk.Button(commentframe2,image=editIcon)
        locals()["editComment_Btn" + str(cmntVAR)].grid(row = iVAR+iVAR+2 , column = 2, pady = (10, 0))            
        locals()["editComment_Btn" + str(cmntVAR)].config(command = partial(commentEdit, "comment"+str(iVAR), cmntVAR, commentlblsDict))
        commentList.append(locals()["editComment_Btn" + str(cmntVAR)])
        
        commentlblsDict[cmntVAR]=commentList
        newcommentEntry.delete(0, "end")
        commentframe2.update()

def deletePost( postKey,postVAR,postList):
    post.deletePost(postDict[postKey][0])
    #commentList
    #print(commentKey, cmntVAR)
    for lbl in postList[postVAR]:
        lbl.destroy()

    del postDict[postKey]
    postframe2.update()

def editPost(postKey):
    editPostframe.tkraise()
    #print(postDict)
    editPostimg.insert(0, postDict[postKey][4])
    editPostName.insert(0, postDict[postKey][2])
    editPostContent.insert(0, postDict[postKey][1])
    
def cancelPost():
    editPostimg.delete(0,"end")
    editPostName.delete(0,"end")
    editPostContent.delete(0,"end")
    postframe.tkraise()
    
def commentEdit(cmntKey, cmntVAR, commentList):
    editCommentframe.tkraise()
    editCommentContent.insert(0, commentDict[cmntKey][1])

def cancelComment():
    editCommentContent.delete(0,"end")
    commentframe.tkraise()

def saveUpdatedComment(cmntVAR,saveCmntbtn):
    print(editCommentContentVar.get())
    saveCmntbtn[cmntVAR][1].config(text = editCommentContentVar.get())
    comment.updateComment(cmntVAR, editCommentContentVar.get())
    commentframe2.update()
    cancelComment()

def saveUpdatedPost(postVAR,SavePostbtn, postKEY):
    #print(postKEY)
    SavePostbtn["post" + str(postVAR)][2].config(text = editPostContentVar.get())
    SavePostbtn["post" + str(postVAR)][1].config(text = editPostNameVar.get())
    SavePostbtn["post" + str(postVAR)][4].config(text = editPostNameVar.get())
    post.updatePost(postVAR, editPostContentVar.get(), "post_Content")
    post.updatePost(postVAR, editPostNameVar.get(), "post_Name")
    post.updatePost(postVAR, editPostimgVar.get(), "img")

    if (editPostimgVar.get() != ""):
    
        urllib.request.urlretrieve(postDict[postKEY][4], f"{postVAR}IMG.png")
        img = Image.open(f"{postVAR}IMG.png")
        locals()["postIMG" + str(postVAR)] = ImageTk.PhotoImage(img)
            
    #print(postDict)
    postDict[postKEY] = [postVAR, editPostNameVar.get(), editPostContentVar.get(),editPostimgVar.get() ]
    #print(postDict)
    cancelPost()

Mainwin = tk.Tk()
Mainwin.geometry('500x500')
#Mainwin.resizable(0,0)
Mainwin.title("Social Media GUI")

Mainwin.columnconfigure(0,weight=1)
Mainwin.rowconfigure(0,weight=1)

#String Vars
name_var = tk.StringVar()
pass_var = tk.StringVar()

fullname_var = tk.StringVar()
role_var = tk.StringVar()

fullnameEditVar = tk.StringVar()
usernameEditVar = tk.StringVar()
PasswordEditVar = tk.StringVar()
roleEditVar = tk.StringVar()

newPostContentvar = tk.StringVar()
newPostnamevar = tk.StringVar()
newPost_imgURL = tk.StringVar()

newComment_var = tk.StringVar()

editPostimgVar = tk.StringVar()
editPostNameVar = tk.StringVar()
editPostContentVar = tk.StringVar()

editCommentContentVar=tk.StringVar()

#Themes
style = ttk.Style(Mainwin)
Mainwin.tk.call('source', r'c:\Users\lenovo\Desktop\awthemes-10.4.0\awlight.tcl')
Mainwin.tk.call('source', r'c:\Users\lenovo\Desktop\awthemes-10.4.0\awdark.tcl')


commentIcon = tk.PhotoImage(file=path+'\images\comment-icon.png')
likeIcon = tk.PhotoImage(file=path+'\images\like-icon.png')
likedIcon = tk.PhotoImage(file=path+'\images\liked-icon.png')
sendIcon = tk.PhotoImage(file=path+'\images\send-btn.png')
deleteIcon = tk.PhotoImage(file=path+'\images\delete-btn.png')
editIcon = tk.PhotoImage(file=path+'\images\edit-btn.png')
pfpIcon = tk.PhotoImage(file=path+'\images\pfp.jpeg')

#CREATING PAGES FOR SOCIAL MEDIA GUI!!!

#Comment Frame:
commentframe=ttk.Frame(Mainwin)
commentframe.grid(column=0,row=0,sticky="nsew")

#Title:
#Labels & Entryboxes:

#Post Frame:
createPostframe=ttk.Frame(Mainwin)
createPostframe.grid(column=0,row=0,sticky="nsew")

#Title:
ttk.Label(createPostframe,text="Create Post", font= ("georgia",20,"bold")).place(x=180,y=0)

#Labels & Entryboxes:
ttk.Label(createPostframe,text="Post Title", font= ("georgia",15)).place(x=20,y=50)
newPostTitle = ttk.Entry(createPostframe, font= ("georgia",15), textvariable= newPostnamevar)
newPostTitle.place(x= 180,y=50)

ttk.Label(createPostframe,text="Post Content", font= ("georgia",15)).place(x=20,y=100)
newpostContent = ttk.Entry(createPostframe, font= ("georgia",15), textvariable= newPostContentvar)
newpostContent.place(x=180,y=100)

ttk.Label(createPostframe,text="Image (optional)", font=("georgia",15)).place(x=20, y=150)
imgURLEntry = ttk.Entry(createPostframe, font=("georgia",15), textvariable= newPost_imgURL)
imgURLEntry.place(x=180,y=150)


#User Frame:
userframe=ttk.Frame(Mainwin)
userframe.grid(column=0,row=0,sticky="nsew")
#Title:
ttk.Label(userframe,text="User", font= ("georgia",20,"bold")).place(x=220,y=0)

#Post Frame:
postframe=ttk.Frame(Mainwin, width = 500, height = 500)
postframe.grid(column = 0, row = 0, sticky = "nsew")

#Login Frame:
loginframe=ttk.Frame(Mainwin)
loginframe.grid(column=0,row=0,sticky="nsew")

#Title:
ttk.Label(loginframe,text="Login Page", font= ("georgia",20,"bold")).place(x=180,y=0)

#Labels & Entryboxes:
ttk.Label(loginframe,text="Username", font= ("georgia",15)).place(x=80,y=50)
nameEntry = ttk.Entry(loginframe,textvariable=name_var, font= ("georgia",15))
nameEntry.place(x= 180,y=50)

ttk.Label(loginframe,text="Password", font= ("georgia",15)).place(x=80,y=100)
LoginPassword = ttk.Entry(loginframe,textvariable=pass_var, font= ("georgia",15), show="*")
LoginPassword.place(x=180,y=100)

#Register Frame:
registerframe=ttk.Frame(Mainwin)
registerframe.grid(column=0,row=0,sticky="nsew")

#Title:
ttk.Label(registerframe,text="Register Page", font= ("georgia",20,"bold")).place(x=150,y=0)

#Labels & Entryboxes:
ttk.Label(registerframe,text="Full Name", font= ("georgia",15)).place(x=80,y=50)
fullnameEntry = ttk.Entry(registerframe,textvariable=fullname_var, font= ("georgia",15))
fullnameEntry.place(x= 180,y=50)

ttk.Label(registerframe,text="Username", font= ("georgia",15)).place(x=80,y=100)
usernameEntry = ttk.Entry(registerframe,textvariable=name_var, font= ("georgia",15))
usernameEntry.place(x=180,y=100)

ttk.Label(registerframe,text="Password", font=("georgia",15)).place(x=80, y=150)
RegisterPassword = ttk.Entry(registerframe,textvariable= pass_var, font=("georgia",15), show="*")
RegisterPassword.place(x=180,y=150)

ttk.Label(registerframe,text="Role", font= ("georgia",15)).place(x=80, y=200)
roleEntry = ttk.Combobox(registerframe,state="readonly",values=["Admin","User"], textvariable=role_var, font= ("georgia",15))
roleEntry.place(x=180,y=200)


#Edit Frame:
editframe=ttk.Frame(Mainwin)
editframe.grid(column=0,row=0,sticky="nsew")

#Title:
ttk.Label(editframe,text="Edit Page", font= ("georgia",20,"bold")).place(x=220,y=0)

#Labels & Entryboxes:
ttk.Label(editframe,text="Full Name", font= ("georgia",15)).place(x=80,y=50)
FullnameEdit = ttk.Entry(editframe, font=("georgia",15), textvariable= fullnameEditVar)
FullnameEdit.place(x= 180,y=50)

ttk.Label(editframe,text="Username", font= ("georgia",15)).place(x=80,y=100)
UsernameEdit = ttk.Entry(editframe, font= ("georgia",15), textvariable= usernameEditVar)
UsernameEdit.place(x=180,y=100)

ttk.Label(editframe,text="Password", font=("georgia",15)).place(x=80, y=150)
PasswordEdit = ttk.Entry(editframe, font=("georgia",15), textvariable= PasswordEditVar)
PasswordEdit.place(x=180,y=150)

ttk.Label(editframe,text="Role", font= ("georgia",15)).place(x=80, y=200)
roleEdit = ttk.Combobox(editframe,state="readonly",values=["Admin","User"], font= ("georgia",15), textvariable= roleEditVar)
roleEdit.place(x=180,y=200)

#Labels & Entryboxes:
welcomeMSG = ttk.Label(userframe,text= "", font= ("georgia",13,"bold"), wraplength= 350, justify = "center")
welcomeMSG.place(x=100,y=40)

#Admin Panel Frame:
adminPanelframe=ttk.Frame(Mainwin)
adminPanelframe.grid(column=0,row=0,sticky="nsew")

#Title:
ttk.Label(adminPanelframe,text="Admin Panel", font= ("georgia",20,"bold")).place(x=170,y=10)

#Edit Post Frame:
editPostframe=ttk.Frame(Mainwin)
editPostframe.grid(column=0,row=0,sticky="nsew")

#Title:
ttk.Label(editPostframe,text="Edit Post Page", font= ("georgia",20,"bold")).place(x=180,y=0)

#Labels & Entryboxes:
ttk.Label(editPostframe,text="Post Image", font=("georgia",15)).place(x=50, y=100)
editPostimg = ttk.Entry(editPostframe, font=("georgia",15), textvariable= editPostimgVar)
editPostimg.place(x=180,y=100)

ttk.Label(editPostframe,text="Post Name", font=("georgia",15)).place(x=50, y=150)
editPostName = ttk.Entry(editPostframe, font=("georgia",15), textvariable= editPostNameVar)
editPostName.place(x=180,y=150)

ttk.Label(editPostframe,text="Post Content", font=("georgia",15)).place(x=50, y=200)
editPostContent = ttk.Entry(editPostframe, font=("georgia",15), textvariable= editPostContentVar)
editPostContent.place(x=180,y=200)

#Edit Comment Frame:
editCommentframe=ttk.Frame(Mainwin)
editCommentframe.grid(column=0,row=0,sticky="nsew")

#Title:
ttk.Label(editCommentframe,text="Edit Comment Page", font= ("georgia",20,"bold")).place(x=120,y=0)

#Labels & Entryboxes:
ttk.Label(editCommentframe,text="comment content", font= ("georgia",15)).place(x=20,y=50)
editCommentContent = ttk.Entry(editCommentframe, font=("georgia",15), textvariable=editCommentContentVar)
editCommentContent.place(x= 20,y=100, width=450, height=200)
#,textvariable= editCommentframeVar


#Creating Table:
adminPanel_table = ttk.Treeview(adminPanelframe)

#Linking to the database
user1=userFile.user(connect.db_url)
user1data = user1.meta.tables["user"].c.keys()
adminPanel_table['columns']=list(user1data)
adminPanel_table.column("#0", width=0,  stretch=tk.NO)
adminPanel_table.heading("#0",text="")

#Headings:
for col in user1data:
    adminPanel_table.column(col, width=90,  stretch=tk.YES)
    adminPanel_table.heading(col,text=col)

#Inserting Data:
allusers = user.getAllUsers()
for u in allusers:
        adminPanel_table.insert(parent="", index="end", iid=u[0], values=list(u))


#scrollbar
tableScrollbar = ttk.Scrollbar(adminPanelframe,orient="vertical", command=adminPanel_table.yview)
adminPanel_table.configure(yscrollcommand=tableScrollbar.set)  
tableScrollbar.pack(side ='right', fill ='y')

adminPanel_table.place(x=20, y=80)

#Creating Buttons:
themeChanger = tk.Button(loginframe, text="Dark Mode",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=8, height=1, command = changeTheme)
themeChanger.place(x=20,y=10)

themeChanger1 = tk.Button(userframe, text="Dark Mode",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=8, height=1, command = changeTheme)
themeChanger1.place(x=19,y=10)

themeChanger2 = tk.Button(registerframe, text="Dark Mode",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=8, height=1, command = changeTheme)
themeChanger2.place(x=20,y=11)

#IMGs for buttons:
close_eye = tk.PhotoImage(file=path+'\images\close-eye.png')
open_eye = tk.PhotoImage(file=path+'\images\open-eye.png')

#aboutPageFile.aboutPage(path+"\images\close-eye.png")

#User Frame Buttons:
tk.Button(userframe, text="Log Out",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=7, height=1,command=lambda: logOut()).place(x=420,y=10)

adminButton = tk.Button(userframe,text="adminPanel",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=11, height=2, command=adminPanelframe.tkraise)

tk.Button(userframe,text="post",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=11, height=2, command=lambda: showPosts()).place(x=330,y=200)

#Login Frame Buttons:
loginBtn = tk.Button(loginframe,text="Login",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=11, height=2, command=lambda : checklogin()).place(x=210,y=170)

accountLabel2 = tk.Label(loginframe,text="Don't have an account?", fg="black",font=("georgia",12))
accountLabel2.place(x=100,y=240)
registerNowBtn = tk.Button(loginframe,text="Register Now!",fg="steelblue",background="whitesmoke",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",command=lambda: switchFrame(registerframe))
registerNowBtn.place(x=270,y=240)

Loginpassword_Btn = tk.Button(loginframe,image=open_eye)
Loginpassword_Btn.place(x=435,y=100)
Loginpassword_Btn.config( command = lambda: show_hidePassword(LoginPassword, Loginpassword_Btn))


#Register Frame Buttons:
tk.Button(registerframe,text="Register",fg="aliceblue",background="steelblue",activebackground="aliceblue",width=11, height=2,font=("georgia",10),bd=0,cursor="hand2",command=lambda : checkregister(name_var,fullname_var,pass_var,role_var)
).place(x=210,y=270)

accountLabel = tk.Label(registerframe,text="Already have an account?", fg="black",font=("georgia",12))
accountLabel.place(x=100,y=320)
LoginNowbtn = tk.Button(registerframe,text="Login Now!",fg="steelblue",background="whitesmoke",activebackground="aliceblue",activeforeground="steelblue",font=("georgia",12),bd=0,cursor="hand2",command= lambda: switchFrame(loginframe))
LoginNowbtn.place(x=290,y=320)

Registerpassword_Btn = tk.Button(registerframe,image=open_eye)
Registerpassword_Btn.config( command = lambda: show_hidePassword(RegisterPassword, Registerpassword_Btn))
Registerpassword_Btn.place(x=435,y=150)

#Post Frame Buttons:

deletePost_Btn = tk.Button(postframe,image=deleteIcon)
deletePost_Btn.place(x=355,y=43)

editPost_Btn = tk.Button(postframe,image=editIcon)
editPost_Btn.place(x=320,y=43)
tk.Button(adminPanelframe,text="<< Back",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=7, height=1, command = userframe.tkraise).place(x=10,y=10)

#Comment Frame Buttons:

#Admin Panel Frame Buttons:
deleteBtn = tk.Button(adminPanelframe,text="Delete",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=11, height=2, command= removeRecord).place(x=350,y=310)

updateBtn = tk.Button(adminPanelframe,text="Edit",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=11, height=2, command= updateRecord).place(x=20,y=310)

tk.Button(adminPanelframe,text="<< Back",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=7, height=1, command = userframe.tkraise).place(x=10,y=10)

#Edit Frame Buttons:
tk.Button(editframe,text="Save",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=11, height=2, command = saveNewRecord).place(x=350,y=310)

tk.Button(editframe,text="Cancel",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=11, height=2, command = adminPanelframe.tkraise).place(x=20,y=310)

#Create Post Frame Buttons:

tk.Button(createPostframe,text="Cancel",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=11, height=2, command = postframe.tkraise).place(x=20,y=310)

#Edit Post Frame Buttons:
#, command = saveNewRecord
tk.Button(editPostframe,text="Cancel",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=11, height=2, command = cancelPost).place(x=20,y=310)

#Edit Comment Frame Buttons:
tk.Button(editCommentframe,text="Save",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=11, height=2, command = saveUpdatedComment).place(x=350,y=310)
#, command = saveNewRecord
tk.Button(editCommentframe,text="Cancel",fg="aliceblue",background="steelblue",activebackground="aliceblue",font=("georgia",12),activeforeground="steelblue",bd=0,cursor="hand2",width=11, height=2, command = cancelComment).place(x=20,y=310)

lightMode()
loginframe.tkraise()
Mainwin.mainloop()
